---
interface props{

}
---
<!DOCTYPE html>
<html>
  <head>
    <style>
      .calendar {
        font-family: Arial, sans-serif;
        border-collapse: collapse;
        width: 300px;
      }

      .calendar th, .calendar td {
        width: 40px;
        height: 40px;
        text-align: center;
        border: 1px solid #ccc;
        background-color: #f5f5f5;
      }

      .calendar th {
        background-color: #333;
        color: #fff;
      }

      .calendar .today {
        background-color: yellow; /* Set the background color to yellow for the current date */
        color: #333; /* Change the text color for better visibility */
      }

      .prev, .next {
        background-color: #333;
        color: #fff;
        border: none;
        cursor: pointer;
        font-size: 20px;
      }

      .prev:hover, .next:hover {
        background-color: #555;
      }
    </style>
  </head>
  <body>
    <h5 id="month-year"></h5>
    <table class="calendar">
      <thead>
        <tr>
          <th>Sun</th>
          <th>Mon</th>
          <th>Tue</th>
          <th>Wed</th>
          <th>Thu</th>
          <th>Fri</th>
          <th>Sat</th>
        </tr>
      </thead>
      <tbody id="calendar-body"></tbody>
    </table>
    <div align="right">
      <button id="prev" class="prev">◄</button>
      <button id="next" class="next">►</button>
    </div>
    <script>
      const calendarBody = document.getElementById('calendar-body');
      const monthYear = document.getElementById('month-year');
      const prevButton = document.getElementById('prev');
      const nextButton = document.getElementById('next');

      let currentDate = new Date();

      prevButton.addEventListener('click', () => {
        currentDate = new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1);
        renderCalendar();
      });

      nextButton.addEventListener('click', () => {
        currentDate = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 1);
        renderCalendar();
      });

      function renderCalendar() {
        const year = currentDate.getFullYear();
        const month = currentDate.getMonth();

        const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
        monthYear.textContent = currentDate.toLocaleDateString('bn-BD', options);       
        calendarBody.innerHTML = '';

        const firstDay = new Date(year, month, 1).getDay();
        const lastDay = new Date(year, month + 1, 0).getDate();

        let date = 1;

        for (let i = 0; i < 6; i++) {
          const row = document.createElement('tr');
          for (let j = 0; j < 7; j++) {
            const cell = document.createElement('td');
            if (i === 0 && j < firstDay) {
              // Cells before the first day of the month
            } else if (date > lastDay) {
              // Cells after the last day of the month
            } else {
              cell.textContent = date;
              const today = new Date(); // Get the current date
              if (date === today.getDate() && year === today.getFullYear() && month === today.getMonth()) {
                cell.classList.add('today');
              }
              date++;
            }
            row.appendChild(cell);
          }
          calendarBody.appendChild(row);
        }
      }

      renderCalendar();
    </script>
  </body>
</html>
